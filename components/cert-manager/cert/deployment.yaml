---
imports: (( &temporary ))
landscape: (( &temporary ))
utilities: (( &temporary ))

settings:
  certificate:
    name: dashboard-identity-ingress
    domain: (( "*." imports.ingress-controller.export.ingress_domain ))
    secret_name: identity-tls
    namespace: (( landscape.namespace ))
  ca: (( self-signed ? .state.ca.value.cert :( imports.cert-controller.export.acmeServer.ca || ~~ ) ))
  identity_dns: (( "identity." .imports.ingress-controller.export.ingress_domain ))
  dashboard_dns: (( "gardener." .imports.ingress-controller.export.ingress_domain ))
  self-signed: (( imports.cert-controller.export.acmeServer.url == "self-signed" ))
  tls:
    crt: (( .state.server.value.cert || ~~ ))
    key: (( .state.server.value.key || ~~ ))

plugins: (( .settings.self-signed ? plugins_self_signed :plugins_not_self_signed ))

plugins_self_signed:
  - <<: (( &temporary ))
  - -echo: "Using self-signed certificates."
  - kubectl: cert

plugins_not_self_signed:
  - <<: (( &temporary ))
  - kubectl: cert
  - -echo: "The export generation waits for the certificate ACME validation, which may take some time."

cert:
  kubeconfig: (( .landscape.clusters[0].kubeconfig ))
  manifests:
    - (( .settings.self-signed ? *.certificate_self_signed :*.certificate ))

certificate:
  <<: (( &template ))
  apiVersion: certmanager.k8s.io/v1alpha1
  kind: Certificate
  metadata:
    name: (( .settings.certificate.name ))
    namespace: (( .settings.certificate.namespace ))
  spec:
    secretName: (( .settings.certificate.secret_name ))
    renewBefore: 360h # 15d
    commonName: (( .settings.certificate.domain ))
    dnsNames:
    - (( .settings.certificate.domain ))
    issuerRef:
      name: (( imports.cert-controller.export.issuerName ))
      kind: ClusterIssuer

certificate_self_signed:
  <<: (( &template ))
  apiVersion: v1
  kind: Secret
  metadata:
    name: (( .settings.certificate.secret_name ))
    namespace: (( .settings.certificate.namespace ))
  data:
    tls.crt: (( base64( .state.server.value.cert ) ))
    tls.key: (( base64( .state.server.value.key ) ))

spec:
  <<: (( &temporary ))
  server:
    commonName: "identity"
    validity: 87600
    usage:
      - ServerAuth
      - ClientAuth
      - KeyEncipherment
    hosts:
      - localhost
      - "127.0.0.1"
      - <<: (( utilities.svcHosts("identity-service",landscape.namespace) ))
      - (( .settings.identity_dns ))
      - (( .settings.dashboard_dns ))


state:
  <<: (( &state(merge none) ))
  ca: (( .settings.self-signed ? utilities.certs.selfSignedCA("identity:ca", false) :~~ ))
  server: (( .settings.self-signed ? utilities.certs.keyCertForCA(spec.server, ca, false) :~~ ))